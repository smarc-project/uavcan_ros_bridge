cmake_minimum_required(VERSION 2.8.3)
project(uavcan_ros_bridge)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

set(CMAKE_CXX_FLAGS "-Wall -Wextra -pedantic -std=c++11")

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  sam_msgs
  geometry_msgs
  roscpp
  sensor_msgs
  std_msgs
  std_srvs
  message_generation
  message_runtime
)

#find_library(UAVCAN_LIB uavcan libuavcan_dsdlc REQUIRED)

#set(UAVCAN_DSDL_DEFINITIONS "/usr/local/share/uavcan/dsdl/uavcan") # For Linux, if the library is installed

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
add_message_files(
  FILES
  UavcanNodeStatus.msg
  ESCStatus.msg
  CircuitStatus.msg
)

## Generate services in the 'srv' folder
add_service_files(
  FILES
  UavcanGetNodeInfo.srv
  UavcanGetTransportStats.srv
)

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  std_msgs
)

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

#message("UACAN_LIB: ${UAVCAN_LIB}")

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS
    include
    dsdl/dsdlc_generated
    ${CMAKE_CURRENT_SOURCE_DIR}/libuavcan/libuavcan/include/
    ${CMAKE_CURRENT_SOURCE_DIR}/libuavcan/libuavcan_drivers/posix/include
    ${CMAKE_CURRENT_SOURCE_DIR}/libuavcan/libuavcan_drivers/linux/include
    #${CMAKE_CURRENT_SOURCE_DIR}/libuavcan/libuavcan/include/dsdlc_generated
  LIBRARIES 
    uavcan
    uav_to_ros_imu
    uav_to_ros_gps_fix
    uav_to_ros_battery_state
    uav_to_ros_magnetic_field
    uav_to_ros_pressure
    uav_to_ros_sensor_pressure
    uav_to_ros_esc_status
    uav_to_ros_circuit_status
    ros_to_uav_command
    ros_to_uav_rpm_command
    ros_to_uav_array_command
    ros_to_uav_uavcan_node_info
    ros_to_uav_uavcan_transport_stats
  CATKIN_DEPENDS geometry_msgs roscpp sensor_msgs std_msgs
#  DEPENDS system_lib
  CFG_EXTRAS uavcan_ros_bridge-extras.cmake
)

set(UAVCAN_DSDL_DEFINITIONS "${CMAKE_CURRENT_SOURCE_DIR}/libuavcan/dsdl/uavcan")
add_subdirectory(libuavcan)

add_custom_target(dsdlc ${CMAKE_CURRENT_SOURCE_DIR}/libuavcan/libuavcan/dsdl_compiler/libuavcan_dsdlc
                  "smarc_uavcan_messages" -I${UAVCAN_DSDL_DEFINITIONS}
                  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/dsdl)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  include
  ${CMAKE_CURRENT_SOURCE_DIR}/libuavcan/libuavcan/include/
  ${CMAKE_CURRENT_SOURCE_DIR}/libuavcan/libuavcan_drivers/posix/include
  ${CMAKE_CURRENT_SOURCE_DIR}/libuavcan/libuavcan_drivers/linux/include
  ${CMAKE_CURRENT_SOURCE_DIR}/libuavcan/libuavcan/include/dsdlc_generated
  dsdl/dsdlc_generated
  ${catkin_INCLUDE_DIRS}
)

## Declare a C++ library
add_library(uavcan_platform_linux
  src/uavcan_platform_linux.cpp
)

add_library(uav_to_ros_imu
  src/uav_to_ros/imu.cpp
)

add_library(uav_to_ros_gps_fix
  src/uav_to_ros/gps_fix.cpp
)

add_library(uav_to_ros_battery_state
  src/uav_to_ros/battery_state.cpp
)

add_library(uav_to_ros_magnetic_field
  src/uav_to_ros/magnetic_field.cpp
)

add_library(uav_to_ros_pressure
  src/uav_to_ros/pressure.cpp
)

add_library(uav_to_ros_sensor_pressure
  src/uav_to_ros/sensor_pressure.cpp
)

add_library(uav_to_ros_esc_status
  src/uav_to_ros/esc_status.cpp
)

add_library(uav_to_ros_circuit_status
  src/uav_to_ros/circuit_status.cpp
)

#add_library(uav_to_ros_actuator_status
#  src/uav_to_ros/actuator_status.cpp
#)

add_library(ros_to_uav_command
  src/ros_to_uav/command.cpp
)

add_library(ros_to_uav_rpm_command
  src/ros_to_uav/rpm_command.cpp
)

add_library(ros_to_uav_array_command
  src/ros_to_uav/array_command.cpp
)

#add_library(ros_to_uav_percent_stamped
#  src/ros_to_uav/percent_stamped.cpp
#)

#add_library(ros_to_uav_ballast_angles
#  src/ros_to_uav/ballast_angles.cpp
#)

add_library(ros_to_uav_uavcan_node_info
  src/ros_to_uav/uavcan_node_info.cpp
)

add_library(ros_to_uav_uavcan_transport_stats
  src/ros_to_uav/uavcan_transport_stats.cpp
)

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
add_executable(uavcan_to_ros_bridge src/uavcan_to_ros_bridge.cpp)
add_executable(ros_to_uavcan_bridge src/ros_to_uavcan_bridge.cpp)
add_executable(ros_to_uavcan_services src/ros_to_uavcan_services.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
add_dependencies(uav_to_ros_sensor_pressure libuavcan_dsdlc dsdlc)
add_dependencies(uav_to_ros_esc_status libuavcan_dsdlc ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(uav_to_ros_circuit_status libuavcan_dsdlc ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
#add_dependencies(uav_to_ros_actuator_status libuavcan_dsdlc ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(ros_to_uav_array_command libuavcan_dsdlc ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
#add_dependencies(ros_to_uav_percent_stamped libuavcan_dsdlc ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
#add_dependencies(ros_to_uav_ballast_angles libuavcan_dsdlc ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(ros_to_uav_uavcan_node_info libuavcan_dsdlc ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(ros_to_uav_uavcan_transport_stats libuavcan_dsdlc ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
target_link_libraries(uavcan_to_ros_bridge
  uavcan_platform_linux
  uav_to_ros_imu
  uav_to_ros_gps_fix
  uav_to_ros_battery_state
  uav_to_ros_magnetic_field
  uav_to_ros_pressure
  uav_to_ros_sensor_pressure
  uav_to_ros_esc_status
  uav_to_ros_circuit_status
  ${catkin_LIBRARIES}
  #${UAVCAN_LIB}
  uavcan
  rt
)

target_link_libraries(ros_to_uavcan_bridge
  uavcan_platform_linux
  ros_to_uav_command
  ros_to_uav_rpm_command
  ros_to_uav_array_command
  ${catkin_LIBRARIES}
  #${UAVCAN_LIB}
  uavcan
  #uavcan_dsdlc
  rt

)

target_link_libraries(ros_to_uavcan_services
  uavcan_platform_linux
  ros_to_uav_uavcan_node_info
  ros_to_uav_uavcan_transport_stats
  ${catkin_LIBRARIES}
  #${UAVCAN_LIB}
  uavcan
  #uavcan_dsdlc
  rt
)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
install(TARGETS 
    uav_to_ros_imu
    uav_to_ros_gps_fix
    uav_to_ros_battery_state
    uav_to_ros_magnetic_field
    uav_to_ros_pressure
    uav_to_ros_sensor_pressure
    uav_to_ros_esc_status
    uav_to_ros_circuit_status
    ros_to_uav_command
    ros_to_uav_rpm_command
    ros_to_uav_array_command
    ros_to_uav_uavcan_node_info
    ros_to_uav_uavcan_transport_stats
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

## Mark cpp header files for installation
install(DIRECTORY include/${PROJECT_NAME}/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
  FILES_MATCHING PATTERN "*.h"
  PATTERN ".svn" EXCLUDE
)

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_uavcan_ros_bridge.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
